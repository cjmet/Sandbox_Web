/* CSS for the fixed navigation bar */

/*
  To-Do:
    * Collapse the header as we scroll?

  Questions:
    * How do I make this work with #ContainerMath instead of #ContainerMath::after ?  Replacing the current content?

*/

/* this is what makes it fill the viewport */
/* this was ommitted from the discussion, demos, and sample files */
html,
body {
  height: 100%;
  margin: 0;
}

body {
  display: grid;
  grid-template-columns: auto 1fr;
  grid-template-rows: min-content 1fr auto;
  grid-template-areas:
    "header header"
    "nav main"
    "footer footer";
}

.DocumentHeader {
  grid-area: header;
  border: 3px solid purple;
  position: sticky;
  top: 0;
  background-color: #333;
  color: white;
  padding: 0.5em;
  text-align: left;
  overflow: hidden;
  z-index: 1000;
}

.DocumentHeader a {
  color: white;
  margin-left: 1em;
  text-decoration: none;
}

.MainNavLeft {
  grid-area: nav;
  border: 3px solid blue;
  background-color: #666;
  color: white;
  padding: 0.5em;
  margin: 0;
  text-align: left;
  text-wrap: nowrap;
  /* overflow: hidden;  */
}

.MainNavLeft > h1,
.MainNavLeft > h2,
.MainNavLeft > h3,
.MainNavLeft > h4,
.MainNavLeft > h5,
.MainNavLeft > h6 {
  margin: 0.5em 0.1em;
}

.MainNavLeft a {
  display: block;
  color: white;
  padding: 0 0.5em 0.25em 1em;
  text-decoration: none;
}

/* ========================================================================
   Main */

main {
  grid-area: "main";
  border: 5px solid green;
  background-color: #c0ebc0;
  margin: 0;
  padding: 0;

  display: flex;
  flex-direction: column;
}

.MainDataTitle {
  margin: 5px;
  border: 3px solid black;
  background-color: wheat;
  text-align: center;
}

.MainDataArticles {
  flex-grow: 1;
  margin: 5px;
  border: 3px solid lightcoral;
  background-color: lightgray;

  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));

  /* OPTION: Flexbox option.  This option is working how I intended. */
  /* display: flex;
  flex-flow: row wrap; */

  /* overflow: auto; */
}

article {
  flex-grow: 1; /* for the flexbox option */
  border: 1px solid black;
  background-color: lightskyblue;
  margin: 0.5em;
  padding: 0.5em;
}
/* /Main 
=========================================================================== */

/* ========================================================================
   Mathemanai 
    * ANY error in the final compiled forumla will cause the entire 
        formula to fail, including all 'previous' steps.
    * Can NOT mix units in the same formula.
    * Can Convert to numeric with tan(atan2(X Units, 1 Unit));
    * can NOT divide Units by Units, only numbers.  
        100px / 2px = fail? 100px / 2 = 50px
    * variables are WORM Cascade, Write Once Read Many and Cascade, and
        variables can not reference themselves, and they are redefined by 
        by the last definition found in the file. Variables are not
        really WORM. More accurately it's probably: 
          Read the File, Define the Variables, Assign the Variables, 
          Read the file again and execute the definitions.
    * WORM
      --pixie: 1500;
      --pixies: calc(var(--pixie) / 3);
      --pixie: 1000;
      var(--pixies) now equals 333;
    * counter is limited in precision
    ...

*/

/* Force Pixels */
@property --100vw {
  syntax: "<length>";
  initial-value: 0px;
  inherits: false;
}

/* Force Integer */
@property --ToInt {
  syntax: "<integer>";
  initial-value: 0;
  inherits: false;
}

#MathTarget::before {
  --math: tan(atan2(12s + 3ms, 1ms));

  --100vw: 100vw;
  --grid-item-avg: 300px;
  --grid-item-tmp: calc(
    tan(atan2(var(--100vw), 1px)) / tan(atan2(var(--grid-item-avg), 1px))
  );
  --grid-item-100x: calc(100 * var(--grid-item-tmp));
  --ToInt: var(--grid-item-tmp);
  --grid-item-num: calc(var(--100vw) / var(--ToInt));

  /* prettier-ignore */
  counter-reset: 
    CA tan(atan2(var(--100vw), 1px)) 
    CB tan(atan2(var(--grid-item-avg), 1px)) 
    CC var(--grid-item-100x) 
    CD var(--ToInt) 
    CE tan(atan2(var(--grid-item-num), 1px))
    ;

  /* prettier-ignore */
  content: "Math: " counter(CA) " / " counter(CB) " = " counter(CC) " int/100 = " counter(CD) " /= " counter(CE);

  /* counter should print 1203 ðŸ§± */
  /* counter is severely limited in it's ability to print numbers */
  /* 12003 fails while 1203 does not. */
}

/* /Mathemanai 
=========================================================================== */

/* ========================================================================
   Container Queries 

    container-type: interacts with grid and flex sizes and alignments
    article {
      container-type: inline-size;
      container-name: article-container;
    } 
*/

#ContainerMath {
  container: container-math / inline-size;
}

/* Force Pixels */
@property --container-width {
  syntax: "<length>";
  initial-value: 0px;
  inherits: false;
}

@container container-math (min-width: 0) {
  #ContainerMath::after {
    --container-width: 100cqw;

    counter-reset: CM tan(atan2(var(--container-width), 1px));
    content: "Container Math: " counter(CM);
  }
}

#ContainerQuery {
  container: article-container / inline-size;
}

@container article-container (min-width: 250px) {
  article h3 {
    font-size: x-small;
    color: magenta;
  }
}

@container article-container (min-width: 300px) {
  article h3 {
    font-size: small;
    color: red;
  }
}

@container article-container (min-width: 350px) {
  article h3 {
    font-size: medium;
    color: darkgreen;
  }
}

@container article-container (min-width: 400px) {
  article h3 {
    font-size: large;
    color: blue;
  }
}

@container article-container (min-width: 450px) {
  article h3 {
    font-size: x-large;
    color: purple;
  }
}

@container article-container (min-width: 500px) {
  article h3 {
    font-size: xx-large;
    color: black;
  }
}

@container article-container (min-width: 550px) {
  article h3 {
    font-size: xxx-large;
    color: white;
  }
}

/* /Container Queries 
=========================================================================== */

footer {
  grid-area: footer;
  border: 3px solid purple;
  background-color: #333;
  color: white;
  text-align: right;
}

footer > p {
  margin: 0;
  padding: 0.1em 0.5em;
  font-size: small;
}

.HeaderWithDescription {
  margin-bottom: 0.1em;
}

.HeaderDescription {
  margin-top: 0.1em;
  font-size: small;
}
